package ar.edu.unlam;

import static org.junit.Assert.*;

import org.junit.Test;

public class TestEstacionamiento {

	@Test
	public void testQueAlComenzarLaCantidadDeCocherasOcupadasEsCero() {
		Estacionamiento est= new Estacionamiento("24horas");
		Cochera c = new Cochera("a-1", false);
		assertEquals((Integer)0,est.getCantidadCocherasOcupadas());
	}
	@Test
	public void testQueAlIngresarUnCocheLaCantidadDeCocherasDisponiblesEs29() {
		Estacionamiento est= new Estacionamiento("24horas");
		Cochera c = new Cochera("a-1", false);
		Cochera c1 = new Cochera("a-2", false);
		Cochera c2 = new Cochera("a-3", false);
		Cochera c3 = new Cochera("a-4", false);
		Cochera c4 = new Cochera("a-5", false);
		Cochera c5 = new Cochera("a-6", false);
		Cochera c6 = new Cochera("a-7", false);
		Cochera c7 = new Cochera("a-8", false);
		Cochera c8 = new Cochera("a-9", false);
		Cochera c9 = new Cochera("a-10", false);
		Cochera c10 = new Cochera("a-11", false);
		Cochera c11 = new Cochera("a-12", false);
		Cochera c12 = new Cochera("a-13", false);
		Cochera c13 = new Cochera("a-14", false);
		Cochera c14 = new Cochera("a-15", false);
		Cochera c15 = new Cochera("a-16", false);
		Cochera c16 = new Cochera("a-17", false);
		Cochera c17 = new Cochera("a-18", false);
		Cochera c18 = new Cochera("a-19", false);
		Cochera c19 = new Cochera("a-20", false);
		Cochera c20 = new Cochera("a-21", false);
		Cochera c21 = new Cochera("a-22", false);
		Cochera c22 = new Cochera("a-23", false);
		Cochera c23 = new Cochera("a-24", false);
		Cochera c24 = new Cochera("a-25", false);
		Cochera c25 = new Cochera("a-26", false);
		Cochera c26 = new Cochera("a-27", false);
		Cochera c27 = new Cochera("a-28", false);
		Cochera c28 = new Cochera("a-29", false);
		Cochera c29 = new Cochera("a-30", false);
		Auto a = new Auto("abc-123", true);
		est.agregarCochera(c);
		est.agregarCochera(c1);
		est.agregarCochera(c2);
		est.agregarCochera(c3);
		est.agregarCochera(c4);
		est.agregarCochera(c5);
		est.agregarCochera(c6);
		est.agregarCochera(c7);
		est.agregarCochera(c8);
		est.agregarCochera(c9);
		est.agregarCochera(c10);
		est.agregarCochera(c11);
		est.agregarCochera(c12);
		est.agregarCochera(c13);
		est.agregarCochera(c14);
		est.agregarCochera(c15);
		est.agregarCochera(c16);
		est.agregarCochera(c17);
		est.agregarCochera(c18);
		est.agregarCochera(c19);
		est.agregarCochera(c20);
		est.agregarCochera(c21);
		est.agregarCochera(c22);
		est.agregarCochera(c23);
		est.agregarCochera(c24);
		est.agregarCochera(c25);
		est.agregarCochera(c26);
		est.agregarCochera(c27);
		est.agregarCochera(c28);
		est.agregarCochera(c29);
		c.setOcupadoPor(a);
		c.setReservada(true);
		assertEquals((Integer)29, est.getCantidadCocherasDisponibles());
		
	}
	
	@Test (expected = Exception.class)
	public void testQueAlIntentarEstacionarUnAutoNoHabilitadoEnUnaCocheraReservadaLaCantidadDeCocherasDisponiblesNoCambia() throws Exception {
		Estacionamiento est= new Estacionamiento("24horas");
		Cochera c = new Cochera("a-1", true);
		Cochera c1 = new Cochera("a-2", false);
		Cochera c2 = new Cochera("a-3", false);
		Cochera c3 = new Cochera("a-4", false);
		Cochera c4 = new Cochera("a-5", false);
		Cochera c5 = new Cochera("a-6", false);
		Cochera c6 = new Cochera("a-7", false);
		Cochera c7 = new Cochera("a-8", false);
		Cochera c8 = new Cochera("a-9", false);
		Cochera c9 = new Cochera("a-10", false);
		Cochera c10 = new Cochera("a-11", false);
		Cochera c11 = new Cochera("a-12", false);
		Cochera c12 = new Cochera("a-13", false);
		Cochera c13 = new Cochera("a-14", false);
		Cochera c14 = new Cochera("a-15", false);
		Cochera c15 = new Cochera("a-16", false);
		Cochera c16 = new Cochera("a-17", false);
		Cochera c17 = new Cochera("a-18", false);
		Cochera c18 = new Cochera("a-19", false);
		Cochera c19 = new Cochera("a-20", false);
		Cochera c20 = new Cochera("a-21", false);
		Cochera c21 = new Cochera("a-22", false);
		Cochera c22 = new Cochera("a-23", false);
		Cochera c23 = new Cochera("a-24", false);
		Cochera c24 = new Cochera("a-25", false);
		Cochera c25 = new Cochera("a-26", false);
		Cochera c26 = new Cochera("a-27", false);
		Cochera c27 = new Cochera("a-28", false);
		Cochera c28 = new Cochera("a-29", false);
		Cochera c29 = new Cochera("a-30", false);
		Auto a = new Auto("abc-123", false);
		est.agregarCochera(c);
		est.agregarCochera(c1);
		est.agregarCochera(c2);
		est.agregarCochera(c3);
		est.agregarCochera(c4);
		est.agregarCochera(c5);
		est.agregarCochera(c6);
		est.agregarCochera(c7);
		est.agregarCochera(c8);
		est.agregarCochera(c9);
		est.agregarCochera(c10);
		est.agregarCochera(c11);
		est.agregarCochera(c12);
		est.agregarCochera(c13);
		est.agregarCochera(c14);
		est.agregarCochera(c15);
		est.agregarCochera(c16);
		est.agregarCochera(c17);
		est.agregarCochera(c18);
		est.agregarCochera(c19);
		est.agregarCochera(c20);
		est.agregarCochera(c21);
		est.agregarCochera(c22);
		est.agregarCochera(c23);
		est.agregarCochera(c24);
		est.agregarCochera(c25);
		est.agregarCochera(c26);
		est.agregarCochera(c27);
		est.agregarCochera(c28);
		est.agregarCochera(c29);
		a.estacionar(c);
		assertEquals((Integer)30, est.getCantidadCocherasDisponibles());
	}
	
	@Test
	public void testQueCuandoElEstacionamientoEstaCompletoNoPermiteEstacionarUnNuevoAuto() throws Exception {
		Estacionamiento est= new Estacionamiento("24horas");
		Cochera c = new Cochera("a-1", true);
		Cochera c1 = new Cochera("a-2", false);
		Cochera c2 = new Cochera("a-3", false);
		Cochera c3 = new Cochera("a-4", false);
		Cochera c4 = new Cochera("a-5", false);
		Cochera c5 = new Cochera("a-6", false);
		Cochera c6 = new Cochera("a-7", false);
		Cochera c7 = new Cochera("a-8", false);
		Cochera c8 = new Cochera("a-9", false);
		Cochera c9 = new Cochera("a-10", false);
		Cochera c10 = new Cochera("a-11", false);
		Cochera c11 = new Cochera("a-12", false);
		Cochera c12 = new Cochera("a-13", false);
		Cochera c13 = new Cochera("a-14", false);
		Cochera c14 = new Cochera("a-15", false);
		Cochera c15 = new Cochera("a-16", false);
		Cochera c16 = new Cochera("a-17", false);
		Cochera c17 = new Cochera("a-18", false);
		Cochera c18 = new Cochera("a-19", false);
		Cochera c19 = new Cochera("a-20", false);
		Cochera c20 = new Cochera("a-21", false);
		Cochera c21 = new Cochera("a-22", false);
		Cochera c22 = new Cochera("a-23", false);
		Cochera c23 = new Cochera("a-24", false);
		Cochera c24 = new Cochera("a-25", false);
		Cochera c25 = new Cochera("a-26", false);
		Cochera c26 = new Cochera("a-27", false);
		Cochera c27 = new Cochera("a-28", false);
		Cochera c28 = new Cochera("a-29", false);
		Cochera c29 = new Cochera("a-30", false);
		Auto a = new Auto("abc-123", true);
		Auto a1 = new Auto("abc-123", true);
		Auto a2 = new Auto("abc-123", true);
		Auto a3 = new Auto("abc-123", true);
		Auto a4 = new Auto("abc-123", true);
		Auto a5 = new Auto("abc-123", true);
		Auto a6 = new Auto("abc-123", true);
		Auto a7 = new Auto("abc-123", true);
		Auto a8 = new Auto("abc-123", true);
		Auto a9 = new Auto("abc-123", true);
		Auto a10 = new Auto("abc-123", true);
		Auto a11 = new Auto("abc-123", true);
		Auto a12 = new Auto("abc-123", true);
		Auto a13 = new Auto("abc-123", true);
		Auto a14 = new Auto("abc-123", true);
		Auto a15 = new Auto("abc-123", true);
		Auto a16 = new Auto("abc-123", true);
		Auto a17 = new Auto("abc-123", true);
		Auto a18 = new Auto("abc-123", true);
		Auto a19 = new Auto("abc-123", true);
		Auto a20 = new Auto("abc-123", true);
		Auto a21 = new Auto("abc-123", true);
		Auto a22 = new Auto("abc-123", true);
		Auto a23 = new Auto("abc-123", true);
		Auto a24 = new Auto("abc-123", true);
		Auto a25 = new Auto("abc-123", true);
		Auto a26 = new Auto("abc-123", true);
		Auto a27 = new Auto("abc-123", true);
		Auto a28 = new Auto("abc-123", true);
		Auto a29 = new Auto("abc-123", true);
		est.agregarCochera(c);
		est.agregarCochera(c1);
		est.agregarCochera(c2);
		est.agregarCochera(c3);
		est.agregarCochera(c4);
		est.agregarCochera(c5);
		est.agregarCochera(c6);
		est.agregarCochera(c7);
		est.agregarCochera(c8);
		est.agregarCochera(c9);
		est.agregarCochera(c10);
		est.agregarCochera(c11);
		est.agregarCochera(c12);
		est.agregarCochera(c13);
		est.agregarCochera(c14);
		est.agregarCochera(c15);
		est.agregarCochera(c16);
		est.agregarCochera(c17);
		est.agregarCochera(c18);
		est.agregarCochera(c19);
		est.agregarCochera(c20);
		est.agregarCochera(c21);
		est.agregarCochera(c22);
		est.agregarCochera(c23);
		est.agregarCochera(c24);
		est.agregarCochera(c25);
		est.agregarCochera(c26);
		est.agregarCochera(c27);
		est.agregarCochera(c28);
		est.agregarCochera(c29);
		a.estacionar(c);
		a1.estacionar(c1);
		a2.estacionar(c2);
		a3.estacionar(c3);
		a4.estacionar(c4);
		a5.estacionar(c5);
		a6.estacionar(c6);
		a7.estacionar(c7);
		a8.estacionar(c8);
		a9.estacionar(c9);
		a10.estacionar(c10);
		a11.estacionar(c11);
		a12.estacionar(c12);
		a13.estacionar(c13);
		a14.estacionar(c14);
		a15.estacionar(c15);
		a16.estacionar(c16);
		a17.estacionar(c17);
		a18.estacionar(c18);
		a19.estacionar(c19);
		a20.estacionar(c20);
		a21.estacionar(c21);
		a22.estacionar(c22);
		a23.estacionar(c23);
		a24.estacionar(c24);
		a25.estacionar(c25);
		a26.estacionar(c26);
		a27.estacionar(c27);
		a28.estacionar(c28);
		a29.estacionar(c29);
		assertEquals((Integer)0, est.getCantidadCocherasDisponibles());
		
	}

}
